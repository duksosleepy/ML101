name: Python CI
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch: null
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
env:
  FORCE_COLOR: 1
  UV_CACHE_DIR: /tmp/.uv-cache
permissions:
  contents: read
jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v5
      - run: uvx pre-commit run --all-files --show-diff-on-failure --color=always

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: uv.lock

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install PyAudio dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pyaudio portaudio19-dev

      - name: Install the project
        run: uv sync --all-extras --dev

      - name: Activate .venv
        shell: bash
        run: |
          source .venv/bin/activate

      - uses: tox-dev/action-pre-commit-uv@v1

      - name: Minimize uv cache
        run: uv cache prune --ci

  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest, macos-13, windows-latest]
        python-version: ["3.11", "3.12", "3.13"]
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Cache PyAudio dependencies (Ubuntu)
        if: runner.os == 'Linux'
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
            uv-${{ runner.os }}

      - name: Install PyAudio dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pyaudio portaudio19-dev

      - name: Cache Homebrew packages
        if: runner.os == 'macOS'
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/Homebrew
          key: ${{ runner.os }}-brew-pyaudio-${{ hashFiles('uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-brew-pyaudio-

      - name: Install PyAudio dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install portaudio


      - name: Install uv and set the python version
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install nox
        run: uv tool install nox

      - name: Install the project
        run: uv sync --all-extras --dev

      - name: Activate .venv (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "Activating virtual environment on Windows"
          .\.venv\Scripts\activate

      - name: Activate .venv (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          echo "Activating virtual environment on Linux/macOS"
          source .venv/bin/activate

      - name: Test with nox
        run: nox -e py${{ matrix.python-version }}

      - name: Test with tox
        run: uvx tox -e py${{ matrix.python-version }}

      - name: Run pytest with coverage
        run: uv run pytest --cov --cov-report=xml

        #{%- if cookiecutter.codecov %}
        #{% raw %}
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        #{% endraw %}
        #{%- endif %}

      - name: Minimize uv cache
        run: uv cache prune --ci
