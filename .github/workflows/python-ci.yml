name: Python CI
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch: null
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
env:
  FORCE_COLOR: 1
  UV_CACHE_DIR: /tmp/.uv-cache
permissions:
  contents: read
jobs:
  checks:
    name: Check Python ${{ matrix.python-version }} on ${{ matrix.runs-on }}
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.12"
          - "3.13"
        runs-on:
          - ubuntu-latest
          - windows-latest
          - macos-latest
        include:
          - python-version: pypy-3.10
            runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache PyAudio dependencies (Ubuntu)
        if: runner.os == 'Linux'
        uses: actions/cache@v4
        with:
          path: ~/.apt-cache
          key: ${{ runner.os }}-apt-pyaudio-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-apt-pyaudio-

      - name: Install PyAudio dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pyaudio portaudio19-dev

      - name: Cache Homebrew packages
        if: runner.os == 'macOS'
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/Homebrew
          key: ${{ runner.os }}-brew-pyaudio-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-brew-pyaudio-

      - name: Install PyAudio dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install portaudio

      - name: Setup Python with x86_64 architecture on macOS ARM
        if: runner.os == 'macOS' && runner.arch == 'ARM64'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          allow-prereleases: true
          architecture: x64

      - name: Setup Python normally for other platforms
        if: runner.os != 'macOS' || runner.arch != 'ARM64'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          allow-prereleases: true

      - name: Setup uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: uv.lock

      - name: Install the project
        run: |
          if [ "$RUNNER_OS" == "macOS" ] && [ "$RUNNER_ARCH" == "ARM64" ]; then
            echo "macOS ARM64 detected - installing with x86_64 architecture"
            arch -x86_64 uv sync --all-extras --dev || uv sync --all-extras --dev --exclude vosk
          elif [ "$RUNNER_OS" == "macOS" ]; then
            echo "macOS detected - installing without vosk if needed"
            uv sync --all-extras --dev || uv sync --all-extras --dev --exclude vosk
          else
            echo "Installing all dependencies including vosk"
            uv sync --all-extras --dev
          fi
        env:
          RUNNER_OS: ${{ runner.os }}
          RUNNER_ARCH: ${{ runner.arch }}

      - name: Install nox
        run: uv tool install nox

      - name: Activate .venv
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            echo ".\.venv\Scripts\activate"
            .\.venv\Scripts\activate
          else
            echo "source .venv/bin/activate"
            source .venv/bin/activate
          fi
        env:
          RUNNER_OS: ${{ runner.os }}

      - name: Run hatch tests
        run: |
          nox -s 'tests' -- --hatch=True --vcs=False
          nox -s 'tests' -- --hatch=True --vcs=True

      - name: Minimize uv cache
        run: uv cache prune --ci

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: uv.lock

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install the project
        run: uv sync --all-extras --dev

      - name: Activate .venv
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            echo ".\.venv\Scripts\activate"
            .\.venv\Scripts\activate
          else
            echo "source .venv/bin/activate"
            source .venv/bin/activate
          fi
        env:
          RUNNER_OS: ${{ runner.os }}

      - uses: tox-dev/action-pre-commit-uv@v1

      - name: Minimize uv cache
        run: uv cache prune --ci

  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.12"
          - "3.13"
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Cache PyAudio dependencies
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
            uv-${{ runner.os }}

      - name: Install PyAudio dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pyaudio portaudio19-dev

      - name: Install uv and set the python ${{ matrix.python-version }} version
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install the project
        run: uv sync --all-extras --dev

      - name: Activate .venv
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            echo ".\.venv\Scripts\activate"
            .\.venv\Scripts\activate
          else
            echo "source .venv/bin/activate"
            source .venv/bin/activate
          fi
        env:
          RUNNER_OS: ${{ runner.os }}

      - name: Run tests with tox
        run: >
          uvx tox -e py-${{ matrix.python-version }} -- --cov=./ --cov-report=xml

      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        if: matrix.python-version == '3.12'
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

      - name: Minimize uv cache
        run: uv cache prune --ci
